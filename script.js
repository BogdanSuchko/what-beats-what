const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É–∫–∏
function setCookie(name, value, days) {
    const expires = new Date();
    expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
    document.cookie = name + '=' + value + ';expires=' + expires.toUTCString() + ';path=/';
}

function getCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for(let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
let maxScore = parseInt(getCookie('maxScore')) || 0;
let currentObject = '–∫–∞–º–µ–Ω—å';
let score = 0;
let history = [{text: '–∫–∞–º–µ–Ω—å', emoji: 'ü™®'}];
let usedAnswers = ['–∫–∞–º–µ–Ω—å'];

document.getElementById('userInput').addEventListener('keypress', function(event) {
    if (event.key === 'Enter' && this.style.display !== 'none') {
        event.preventDefault();
        checkAnswer();
    }
});

document.addEventListener('keypress', function(event) {
    if (event.key === 'Enter') {
        const nextButton = document.getElementById('nextButton');
        if (nextButton.style.display === 'block') {
            event.preventDefault();
            nextQuestion();
        }
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
document.addEventListener('keypress', function(event) {
    if (event.key === 'Enter') {
        const gameEndControls = document.getElementById('gameEndControls');
        if (gameEndControls.style.display === 'flex') {
            event.preventDefault();
            playAgain();
        }
    }
});

// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
function saveGameState() {
    const gameState = {
        currentObject,
        score,
        maxScore,
        history,
        usedAnswers,
        lastWinner: history[0] || '–∫–∞–º–µ–Ω—å' // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–±–µ–¥–∏–≤—à–∏–π –æ–±—ä–µ–∫—Ç
    };
    localStorage.setItem('gameState', JSON.stringify(gameState));
}

function loadGameState() {
    try {
        const savedState = localStorage.getItem('gameState');
        if (savedState) {
            const gameState = JSON.parse(savedState);
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (Array.isArray(gameState.history)) {
                gameState.history = gameState.history.map(item => {
                    if (typeof item === 'string') {
                        return { text: item, emoji: '' };
                    }
                    return item;
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            if (gameState && 
                typeof gameState.currentObject === 'string' && 
                typeof gameState.score === 'number' && 
                Array.isArray(gameState.history) && 
                Array.isArray(gameState.usedAnswers)) {
                
                currentObject = gameState.lastWinner || gameState.currentObject; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–±–µ–¥–∏–≤—à–∏–π –æ–±—ä–µ–∫—Ç
                score = gameState.score;
                maxScore = gameState.maxScore || 0;
                history = gameState.history;
                usedAnswers = gameState.usedAnswers;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                document.getElementById('score').textContent = `—Å—á—ë—Ç: ${score} | —Ä–µ–∫–æ—Ä–¥: ${maxScore}`;
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è, –∑–Ω–∞—á–∏—Ç –∏–≥—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
                if (history.length > 0) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
                    const questionText = document.getElementById('questionText');
                    questionText.textContent = `—á—Ç–æ –ø–æ–±–µ–∂–¥–∞–µ—Ç ${toAccusativeCase(currentObject)}?`;
                    questionText.style.display = 'block';
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                    const userInput = document.getElementById('userInput');
                    const submitButton = document.getElementById('submitButton');
                    userInput.style.display = 'block';
                    userInput.value = '';
                    submitButton.style.display = 'block';
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
                    document.getElementById('gameEndControls').style.display = 'none';
                    document.getElementById('nextButton').style.display = 'none';
                    
                    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –±–∏—Ç–≤—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
                    document.getElementById('battleText').textContent = '';
                    document.getElementById('explanation').textContent = '';
                } else {
                    // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                    document.getElementById('questionText').textContent = '—á—Ç–æ –ø–æ–±–µ–∂–¥–∞–µ—Ç –∫–∞–º–µ–Ω—å?';
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
                updateHistory();
            } else {
                // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                resetGameState();
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', error);
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        resetGameState();
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function resetGameState() {
    currentObject = '–∫–∞–º–µ–Ω—å';
    score = 0;
    maxScore = 0;
    history = [{text: '–∫–∞–º–µ–Ω—å', emoji: 'ü™®'}];
    usedAnswers = ['–∫–∞–º–µ–Ω—å'];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    document.getElementById('score').textContent = `—Å—á—ë—Ç: 0 | —Ä–µ–∫–æ—Ä–¥: 0`;
    document.getElementById('questionText').textContent = '—á—Ç–æ –ø–æ–±–µ–∂–¥–∞–µ—Ç –∫–∞–º–µ–Ω—å?';
    document.getElementById('history').textContent = '';
    document.getElementById('battleText').textContent = '';
    document.getElementById('explanation').textContent = '';
    
    // –û—á–∏—â–∞–µ–º localStorage
    localStorage.removeItem('gameState');
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
document.addEventListener('DOMContentLoaded', loadGameState);

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é share
async function share() {
    try {
        const historyText = history.map(item => `${item.text} ${item.emoji}`).join(' ‚Üí ');
        const shareText = `–ú–æ—è –∏–≥—Ä–∞ "–ß—Ç–æ –ø–æ–±–µ–∂–¥–∞–µ—Ç —á—Ç–æ?"\n–°—á—ë—Ç: ${score}\n–†–µ–∫–æ—Ä–¥: ${maxScore}\n\n–ò—Å—Ç–æ—Ä–∏—è:\n${historyText}`;
        
        if (navigator.share) {
            await navigator.share({
                title: '–ß—Ç–æ –ø–æ–±–µ–∂–¥–∞–µ—Ç —á—Ç–æ?',
                text: shareText
            });
        } else {
            // Fallback: –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            await navigator.clipboard.writeText(shareText);
            alert('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:', error);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è –≤ –≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
function toAccusativeCase(word) {
    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≤–∏–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–¥–µ–∂–∞
    const rules = {
        '–∞': '—É',  // –±—É–º–∞–≥–∞ -> –±—É–º–∞–≥—É
        '—è': '—é',  // –∑–µ–º–ª—è -> –∑–µ–º–ª—é
        '—å': '—å',  // –º—ã—à—å -> –º—ã—à—å
        '–π': '–π'   // –∫–ª–µ–π -> –∫–ª–µ–π
    };
    
    const lastChar = word.slice(-1);
    if (rules.hasOwnProperty(lastChar)) {
        return word.slice(0, -1) + rules[lastChar];
    }
    return word;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateHistory
function updateHistory() {
    const historyDiv = document.getElementById('history');
    if (history.length > 1) {
        // –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É —Ç–æ–ª—å–∫–æ –∏–∑ —ç–º–æ–¥–∑–∏, –º–µ–Ω—è–µ–º —Å—Ç—Ä–µ–ª–∫—É –Ω–∞ –∫—É–ª–∞–∫
        const formattedHistory = history.map(item => item.emoji).join(' ü§ú ');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –ø–æ–¥ —ç–º–æ–¥–∑–∏
        const labels = history.map(item => 
            `<div class="history-item">${item.text}</div>`
        ).join('');
        
        historyDiv.innerHTML = `
            <div class="history-chain">${formattedHistory}</div>
            <div class="history-labels">${labels}</div>
        `;
    } else {
        historyDiv.innerHTML = '';
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∏—Ç–≤—ã
function updateBattleText(userInput, currentObject, isVictory, emoji = '') {
    const battleTextDiv = document.getElementById('battleText');
    
    battleTextDiv.innerHTML = `
        ${userInput}
        <div class="beats ${isVictory ? '' : 'defeat'}">
            ${isVictory ? '–ø–æ–±–µ–∂–¥–∞–µ—Ç' : '–Ω–µ –ø–æ–±–µ–∂–¥–∞–µ—Ç'}
        </div>
        ${currentObject}
    `;
}

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é checkAnswer –≤ —á–∞—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
async function checkAnswer() {
    const userInput = document.getElementById('userInput').value.toLowerCase().trim();
    const loadingDiv = document.getElementById('loading');
    const aiResponseDiv = document.getElementById('aiResponse');
    const battleTextDiv = document.getElementById('battleText');
    const explanationDiv = document.getElementById('explanation');
    const submitButton = document.getElementById('submitButton');
    const nextButton = document.getElementById('nextButton');
    
    if (!userInput) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—ã –∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
    if (usedAnswers.includes(userInput)) {
        explanationDiv.textContent = '–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ!';
        return;
    }
    
    try {
        loadingDiv.style.display = 'block';
        aiResponseDiv.style.display = 'none';
        explanationDiv.textContent = '';
        
        const response = await askAI(currentObject, userInput);
        
        loadingDiv.style.display = 'none';
        aiResponseDiv.style.display = 'block';
        
        if (response.result === '–ø–æ–±–µ–¥–∞') {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
            usedAnswers.push(userInput);
            
            score++;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—á–µ—Ç
            if (score > maxScore) {
                maxScore = score;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–∞
            document.getElementById('score').textContent = `—Å—á—ë—Ç: ${score} | —Ä–µ–∫–æ—Ä–¥: ${maxScore}`;
            document.getElementById('questionText').style.display = 'none';
            document.getElementById('userInput').style.display = 'none';
            
            updateBattleText(userInput, currentObject, true, response.emoji);
            
            let formattedExplanation = response.explanation.charAt(0).toUpperCase() + 
                                      response.explanation.slice(1).toLowerCase();
            if (!formattedExplanation.endsWith('.')) {
                formattedExplanation += '.';
            }
            
            explanationDiv.textContent = formattedExplanation;
            
            history.unshift({text: userInput, emoji: response.emoji});
            
            submitButton.style.display = 'none';
            nextButton.style.display = 'block';
            
            updateHistory();
            saveGameState(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã
            
        } else {
            score = 0;
            usedAnswers = ['–∫–∞–º–µ–Ω—å'];
            document.getElementById('score').textContent = `—Å—á—ë—Ç: ${score} | —Ä–µ–∫–æ—Ä–¥: ${maxScore}`;
            
            updateBattleText(userInput, currentObject, false, response.emoji);
            
            let formattedExplanation = response.explanation.charAt(0).toUpperCase() + 
                                      response.explanation.slice(1).toLowerCase();
            if (!formattedExplanation.endsWith('.')) {
                formattedExplanation += '.';
            }
            
            explanationDiv.textContent = formattedExplanation;
            
            submitButton.style.display = 'none';
            document.getElementById('userInput').style.display = 'none';
            document.getElementById('questionText').style.display = 'block';
            
            document.getElementById('gameEndControls').style.display = 'flex';
        }
        
    } catch (error) {
        loadingDiv.style.display = 'none';
        aiResponseDiv.style.display = 'none';
        console.error('–û—à–∏–±–∫–∞:', error);
        explanationDiv.textContent = error.message;
    }
}

async function askAI(object1, object2) {
    const API_KEY = window.API_KEY;  // –ë—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ config.js
    const url = 'https://models.inference.ai.azure.com/v1/chat/completions';
    
    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: "Mistral-large-2407",
                messages: [
                    {
                        role: "system",
                        content: `–¢—ã —Å—É–¥—å—è –≤ –∏–≥—Ä–µ "–ß—Ç–æ –ø–æ–±–µ–∂–¥–∞–µ—Ç —á—Ç–æ?". 

                        –í–ê–ñ–ù–û! –ì–õ–ê–í–ù–´–ï –ü–†–ê–í–ò–õ–ê (–ê–ë–°–û–õ–Æ–¢–ù–´–ô –ü–†–ò–û–†–ò–¢–ï–¢):
                        –≠—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏–º–µ—é—Ç –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã –∏–ª–∏ –æ—Å–ø–æ—Ä–µ–Ω—ã:
                        
                        1. –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ –∏ –∏—Ö —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç–∏ –í–°–ï–ì–î–ê —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–∞–∫:
                           ‚úì –ù–æ–∂–Ω–∏—Ü—ã –∏ –∏—Ö –∞–Ω–∞–ª–æ–≥–∏ (–Ω–æ–∂, –º–µ—á, –ø–∏–ª–∞ –∏ —Ç.–¥.) –í–°–ï–ì–î–ê –ø–æ–±–µ–∂–¥–∞—é—Ç –±—É–º–∞–≥—É (—Ä–µ–∂—É—Ç –µ—ë)
                           ‚úì –ë—É–º–∞–≥–∞ –í–°–ï–ì–î–ê –ø–æ–±–µ–∂–¥–∞–µ—Ç –∫–∞–º–µ–Ω—å (–∑–∞–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ)
                           ‚úì –ö–∞–º–µ–Ω—å –í–°–ï–ì–î–ê –ø–æ–±–µ–∂–¥–∞–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã –∏ –∏—Ö –∞–Ω–∞–ª–æ–≥–∏ (–∑–∞—Ç—É–ø–ª—è–µ—Ç/–ª–æ–º–∞–µ—Ç –∏—Ö)
                        
                        2. –≠—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ù–ï–ò–ó–ú–ï–ù–ù–´ –∏ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ 100% —Å–ª—É—á–∞–µ–≤:
                           - –ï—Å–ª–∏ object2 —ç—Ç–æ —Ä–µ–∂—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç (–Ω–æ–∂–Ω–∏—Ü—ã, –Ω–æ–∂, –º–µ—á –∏ —Ç.–¥.) –∏ object1="–±—É–º–∞–≥–∞" ‚Üí –í–°–ï–ì–î–ê "–ø–æ–±–µ–¥–∞"
                           - –ï—Å–ª–∏ object2="–±—É–º–∞–≥–∞" –∏ object1="–∫–∞–º–µ–Ω—å" ‚Üí –í–°–ï–ì–î–ê "–ø–æ–±–µ–¥–∞"
                           - –ï—Å–ª–∏ object2="–∫–∞–º–µ–Ω—å" –∏ object1 —ç—Ç–æ —Ä–µ–∂—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç ‚Üí –í–°–ï–ì–î–ê "–ø–æ–±–µ–¥–∞"
                        
                        3. –û–±—Ä–∞—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ó–ê–ü–†–ï–©–ï–ù–´:
                           - –ï—Å–ª–∏ object2="–±—É–º–∞–≥–∞" –∏ object1 —ç—Ç–æ —Ä–µ–∂—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç ‚Üí –í–°–ï–ì–î–ê "–ø–æ—Ä–∞–∂–µ–Ω–∏–µ"
                           - –ï—Å–ª–∏ object2 —ç—Ç–æ —Ä–µ–∂—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –∏ object1="–∫–∞–º–µ–Ω—å" ‚Üí –í–°–ï–ì–î–ê "–ø–æ—Ä–∞–∂–µ–Ω–∏–µ"
                           - –ï—Å–ª–∏ object2="–∫–∞–º–µ–Ω—å" –∏ object1="–±—É–º–∞–≥–∞" ‚Üí –í–°–ï–ì–î–ê "–ø–æ—Ä–∞–∂–µ–Ω–∏–µ"

                        –ü–†–ê–í–ò–õ–ê –î–õ–Ø –û–°–¢–ê–õ–¨–ù–´–• –ü–†–ï–î–ú–ï–¢–û–í:
                        1. –õ–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:
                           - –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
                           - –£—á–∏—Ç—ã–≤–∞–π —Ä–∞–∑–º–µ—Ä—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                           - –ü–æ–±–µ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏—á–Ω–æ–π
                        
                        2. –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
                           - –û–ø–∏—à–∏ –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è
                           - –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–∏–º
                           - –ò–∑–±–µ–≥–∞–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–π

                        –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
                        {
                            "result": "–ø–æ–±–µ–¥–∞/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ",
                            "explanation": "–ß–µ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è",
                            "emoji": "–ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –¥–ª—è object2"
                        }
                        
                        –ü—Ä–∏–º–µ—Ä—ã —ç–º–æ–¥–∑–∏:
                        - –î–ª—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: –∫–∞–º–µ–Ω—å ü™®, –Ω–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è, –±—É–º–∞–≥–∞ üìÑ
                        - –î–ª—è –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: –¥–µ—Ä–µ–≤–æ üå≥, –æ–≥–æ–Ω—å üî•, –≤–æ–¥–∞ üíß
                        - –î–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: –º–µ—á ‚öîÔ∏è, —â–∏—Ç üõ°Ô∏è, –º–æ–ª–æ—Ç üî®
                        - –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–º–æ–¥–∑–∏ –Ω–µ—Ç, –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É`
                    },
                    {
                        role: "user",
                        content: `–ú–æ–∂–µ—Ç –ª–∏ ${object2} –ø–æ–±–µ–¥–∏—Ç—å ${object1}? –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.`
                    }
                ],
                temperature: 0.5, // –£–º–µ–Ω—å—à–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                max_tokens: 150,
                top_p: 1.0
            })
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data?.choices?.[0]?.message?.content) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API');
        }

        const responseText = data.choices[0].message.content.trim();
        
        // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        console.log('=== –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ ===');
        console.log(responseText);
        console.log('==============================');
        
        try {
            // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown-—Ä–∞–∑–º–µ—Ç–∫–∏ JSON
            const cleanedResponse = responseText
                .replace(/```json\n?/, '')  // –£–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä JSON
                .replace(/```$/, '')        // –£–¥–∞–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—ã–π –º–∞—Ä–∫–µ—Ä
                .trim();                    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            
            const answer = JSON.parse(cleanedResponse);
            
            if (!answer.result || !answer.explanation) {
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ');
            }

            let explanation = answer.explanation;
            if (!explanation.endsWith('.')) {
                explanation += '.';
            }

            return {
                result: answer.result.toLowerCase(),
                explanation: explanation,
                emoji: answer.emoji || ''
            };

        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', e);
            console.error('–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:', responseText);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API:', error);
        throw new Error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞');
    }
}

function nextQuestion() {
    const questionText = document.getElementById('questionText');
    const submitButton = document.getElementById('submitButton');
    const nextButton = document.getElementById('nextButton');
    const userInput = document.getElementById('userInput');
    const battleText = document.getElementById('battleText');
    const explanation = document.getElementById('explanation');
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç - –±–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    currentObject = userInput.value.toLowerCase().trim();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º
    questionText.textContent = `—á—Ç–æ –ø–æ–±–µ–∂–¥–∞–µ—Ç ${toAccusativeCase(currentObject)}?`;
    questionText.style.display = 'block';
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
    userInput.value = '';
    battleText.textContent = '';
    explanation.textContent = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫—É GO
    userInput.style.display = 'block';
    submitButton.style.display = 'block';
    nextButton.style.display = 'none';
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    userInput.focus();
    
    saveGameState();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é playAgain
function playAgain() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
    history = [{text: '–∫–∞–º–µ–Ω—å', emoji: 'ü™®'}];
    currentObject = '–∫–∞–º–µ–Ω—å';
    usedAnswers = ['–∫–∞–º–µ–Ω—å'];
    score = 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    document.getElementById('questionText').textContent = '—á—Ç–æ –ø–æ–±–µ–∂–¥–∞–µ—Ç –∫–∞–º–µ–Ω—å?';
    document.getElementById('score').textContent = `—Å—á—ë—Ç: ${score} | —Ä–µ–∫–æ—Ä–¥: ${maxScore}`;
    document.getElementById('battleText').textContent = '';
    document.getElementById('explanation').textContent = '';
    document.getElementById('history').innerHTML = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const userInput = document.getElementById('userInput');
    userInput.style.display = 'block';
    userInput.value = '';
    userInput.focus(); // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–∫—É—Å
    
    document.getElementById('submitButton').style.display = 'block';
    document.getElementById('gameEndControls').style.display = 'none';
    
    saveGameState();
}